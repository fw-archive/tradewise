{"version":3,"sources":["C:/Users/okjin/Documents/GitHub/tradewise/constants/Colors.js","C:/Users/okjin/Documents/GitHub/tradewise/components/TabBarIcon.js","C:/Users/okjin/Documents/GitHub/tradewise/screens/HomeScreen.js","C:/Users/okjin/Documents/GitHub/tradewise/screens/LinksScreen.js","C:/Users/okjin/Documents/GitHub/tradewise/navigation/BottomTabNavigator.js","C:/Users/okjin/Documents/GitHub/tradewise/App.js","C:/Users/okjin/Documents/GitHub/tradewise/navigation/useLinking.js","C:/Users/okjin/Documents/GitHub/tradewise/web-build/register-service-worker.js","C:/Users/okjin/Documents/GitHub/tradewise/assets/fonts/SpaceMono-Regular.ttf"],"names":["TabBarIcon","props","Ionicons","name","size","style","marginBottom","color","focused","Colors","StyleSheet","create","container","flex","backgroundColor","contentContainer","paddingTop","optionIconContainer","marginRight","option","paddingHorizontal","paddingVertical","borderWidth","hairlineWidth","borderBottomWidth","borderColor","lastOption","optionText","fontSize","alignSelf","marginTop","LinksScreen","styles","contentContainerStyle","icon","label","onPress","WebBrowser","isLastOption","OptionButton","View","flexDirection","optionTextContainer","Text","BottomTab","createBottomTabNavigator","BottomTabNavigator","navigation","route","setOptions","headerTitle","getHeaderTitle","Navigator","initialRouteName","Screen","component","options","title","tabBarIcon","state","routes","index","Stack","createStackNavigator","App","React","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","getInitialState","useLinking","prefixes","Linking","makeUrl","config","Root","path","screens","Home","Links","Settings","a","async","SplashScreen","preventAutoHide","Font","font","require","console","warn","hide","skipLoadingScreen","Platform","OS","StatusBar","barStyle","NavigationContainer","ref","initialState","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","module","exports"],"mappings":"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","file":"static/js/app.a573a600.chunk.js","sourcesContent":["const tintColor = '#2f95dc';\n\nexport default {\n  tintColor,\n  tabIconDefault: '#ccc',\n  tabIconSelected: tintColor,\n  tabBar: '#fefefe',\n  errorBackground: 'red',\n  errorText: '#fff',\n  warningBackground: '#EAEB5E',\n  warningText: '#666804',\n  noticeBackground: tintColor,\n  noticeText: '#fff',\n};\n","import * as React from 'react';\nimport { Ionicons } from '@expo/vector-icons';\n\nimport Colors from '../constants/Colors';\n\nexport default function TabBarIcon(props) {\n  return (\n    <Ionicons\n      name={props.name}\n      size={30}\n      style={{ marginBottom: -3 }}\n      color={props.focused ? Colors.tabIconSelected : Colors.tabIconDefault}\n    />\n  );\n}\n","import * as React from 'react';\nimport { Image, Platform, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport * as WebBrowser from 'expo-web-browser';\nimport { Ionicons } from '@expo/vector-icons';\nimport { RectButton } from 'react-native-gesture-handler';\n\nimport { MonoText } from '../components/StyledText';\n\nexport default function HomeScreen() {\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n      <OptionButton\n        icon=\"md-school\"\n        label=\"Read the Expo documentation\"\n        onPress={() => WebBrowser.openBrowserAsync('https://docs.expo.io')}\n      />\n\n      <OptionButton\n        icon=\"md-compass\"\n        label=\"Read the Reactdd Navigation documentation\"\n        onPress={() => WebBrowser.openBrowserAsync('https://reactnavigation.org')}\n      />\n\n      <OptionButton\n        icon=\"ios-chatboxes\"\n        label=\"Ask a quessstion on the forums\"\n        onPress={() => WebBrowser.openBrowserAsync('https://forums.expo.io')}\n        isLastOption\n      />\n      <OptionButton\n        icon=\"ios-chatboxes\"\n        label=\"Ask a question on the forums\"\n        onPress={() => WebBrowser.openBrowserAsync('https://forums.expo.io')}\n        isLastOption\n      />\n      <OptionButton\n        icon=\"ios-chatboxes\"\n        label=\"Ask a question on the forums\"\n        onPress={() => WebBrowser.openBrowserAsync('https://forums.expo.io')}\n        isLastOption\n      />\n      <OptionButton\n        icon=\"ios-chatboxes\"\n        label=\"Ask a question on the forums\"\n        onPress={() => WebBrowser.openBrowserAsync('https://forums.expo.io')}\n        isLastOption\n      />\n      <OptionButton\n        icon=\"ios-chatboxes\"\n        label=\"Ask a question on the forums\"\n        onPress={() => WebBrowser.openBrowserAsync('https://forums.expo.io')}\n        isLastOption\n      />\n      \n    </ScrollView>\n  );\n}\n\nHomeScreen.navigationOptions = {\n  header: null,\n};\n\nfunction DevelopmentModeNotice() {\n  if (__DEV__) {\n    const learnMoreButton = (\n      <Text onPress={handleLearnMorePress} style={styles.helpLinkText}>\n        Learn more\n      </Text>\n    );\n\n    return (\n      <Text style={styles.developmentModeText}>\n        Development mode is enabled: your app will be slower but you can use useful development\n        tools. {learnMoreButton}\n      </Text>\n    );\n  } else {\n    return (\n      <Text style={styles.developmentModeText}>\n        You are not in development mode: your app will run at full speed.\n      </Text>\n    );\n  }\n}\n\nfunction handleLearnMorePress() {\n  WebBrowser.openBrowserAsync('https://docs.expo.io/versions/latest/workflow/development-mode/');\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/versions/latest/get-started/create-a-new-app/#making-your-first-change'\n  );\n}\n\nfunction OptionButton({ icon, label, onPress, isLastOption }) {\n  return (\n    <RectButton style={[styles.option, isLastOption && styles.lastOption]} onPress={onPress}>\n      <View style={{ flexDirection: 'row' }}>\n        <View style={styles.optionIconContainer}>\n          <Ionicons name={icon} size={22} color=\"rgba(0,0,0,0.35)\" />\n        </View>\n        <View style={styles.optionTextContainer}>\n          <Text style={styles.optionText}>{label}</Text>\n        </View>\n      </View>\n    </RectButton>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fafafa',\n  },\n  contentContainer: {\n    paddingTop: 15,\n  },\n  optionIconContainer: {\n    marginRight: 12,\n  },\n  option: {\n    backgroundColor: '#fdfdfd',\n    paddingHorizontal: 15,\n    paddingVertical: 15,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: 0,\n    borderColor: '#ededed',\n  },\n  lastOption: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n  },\n  optionText: {\n    fontSize: 15,\n    alignSelf: 'flex-start',\n    marginTop: 1,\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport * as WebBrowser from 'expo-web-browser';\nimport { RectButton, ScrollView } from 'react-native-gesture-handler';\n\nexport default function LinksScreen() {\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n      <OptionButton\n        icon=\"md-school\"\n        label=\"Read the Expo dosdcumentation\"\n        onPress={() => WebBrowser.openBrowserAsync('https://docs.expo.io')}\n      />\n\n      <OptionButton\n        icon=\"md-compass\"\n        label=\"Read the React Navigation documentation\"\n        onPress={() => WebBrowser.openBrowserAsync('https://reactnavigation.org')}\n      />\n\n      <OptionButton\n        icon=\"ios-chatboxes\"\n        label=\"Ask a question on the forums\"\n        onPress={() => WebBrowser.openBrowserAsync('https://forums.expo.io')}\n        isLastOption\n      />\n      <OptionButton\n        icon=\"ios-chatboxes\"\n        label=\"Ask a question on the forums\"\n        onPress={() => WebBrowser.openBrowserAsync('https://forums.expo.io')}\n        isLastOption\n      />\n      <OptionButton\n        icon=\"ios-chatboxes\"\n        label=\"Ask a question on the forums\"\n        onPress={() => WebBrowser.openBrowserAsync('https://forums.expo.io')}\n        isLastOption\n      />\n      <OptionButton\n        icon=\"ios-chatboxes\"\n        label=\"Ask a question on the forums\"\n        onPress={() => WebBrowser.openBrowserAsync('https://forums.expo.io')}\n        isLastOption\n      />\n      <OptionButton\n        icon=\"ios-chatboxes\"\n        label=\"Ask a question on the forums\"\n        onPress={() => WebBrowser.openBrowserAsync('https://forums.expo.io')}\n        isLastOption\n      />\n      \n    </ScrollView>\n  );\n}\n\nfunction OptionButton({ icon, label, onPress, isLastOption }) {\n  return (\n    <RectButton style={[styles.option, isLastOption && styles.lastOption]} onPress={onPress}>\n      <View style={{ flexDirection: 'row' }}>\n        <View style={styles.optionIconContainer}>\n          <Ionicons name={icon} size={22} color=\"rgba(0,0,0,0.35)\" />\n        </View>\n        <View style={styles.optionTextContainer}>\n          <Text style={styles.optionText}>{label}</Text>\n        </View>\n      </View>\n    </RectButton>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fafafa',\n  },\n  contentContainer: {\n    paddingTop: 15,\n  },\n  optionIconContainer: {\n    marginRight: 12,\n  },\n  option: {\n    backgroundColor: '#fdfdfd',\n    paddingHorizontal: 15,\n    paddingVertical: 15,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: 0,\n    borderColor: '#ededed',\n  },\n  lastOption: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n  },\n  optionText: {\n    fontSize: 15,\n    alignSelf: 'flex-start',\n    marginTop: 1,\n  },\n});\n","import * as React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport TabBarIcon from '../components/TabBarIcon';\nimport HomeScreen from '../screens/HomeScreen';\nimport LinksScreen from '../screens/LinksScreen';\n\nconst BottomTab = createBottomTabNavigator();\nconst INITIAL_ROUTE_NAME = 'Home';\n\nexport default function BottomTabNavigator({ navigation, route }) {\n  // Set the header title on the parent stack navigator depending on the\n  // currently active tab. Learn more in the documentation:\n  // https://reactnavigation.org/docs/en/screen-options-resolution.html\n  navigation.setOptions({ headerTitle: getHeaderTitle(route) });\n\n  return (\n    <BottomTab.Navigator initialRouteName={INITIAL_ROUTE_NAME}>\n      <BottomTab.Screen\n        name=\"Links\"\n        component={LinksScreen}\n        options={{\n          title: '유용한 링크 모음',\n          tabBarIcon: ({ focused }) => <TabBarIcon focused={focused} name=\"md-book\" />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\nfunction getHeaderTitle(route) {\n  const routeName = route.state?.routes[route.state.index]?.name ?? INITIAL_ROUTE_NAME;\n\n  switch (routeName) {\n    case 'Home':\n      return '비트맥스거래소.com';\n    case 'Links':\n      return '비트맥스거래소.com';\n  }\n}\n","import * as React from 'react';\nimport { Platform, StatusBar, StyleSheet, View } from 'react-native';\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport BottomTabNavigator from './navigation/BottomTabNavigator';\nimport useLinking from './navigation/useLinking';\n\nconst Stack = createStackNavigator();\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\n  const containerRef = React.useRef();\n  const { getInitialState } = useLinking(containerRef);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHide();\n\n        // Load our initial navigation state\n        setInitialNavigationState(await getInitialState());\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hide();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return (\n      <View style={styles.container}>\n        {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\n        <NavigationContainer ref={containerRef} initialState={initialNavigationState}>\n          <Stack.Navigator>\n            <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n","import { useLinking } from '@react-navigation/native';\nimport { Linking } from 'expo';\n\nexport default function(containerRef) {\n  return useLinking(containerRef, {\n    prefixes: [Linking.makeUrl('/')],\n    config: {\n      Root: {\n        path: 'root',\n        screens: {\n          Home: 'home',\n          Links: 'links',\n          Settings: 'settings',\n        },\n      },\n    },\n  });\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}